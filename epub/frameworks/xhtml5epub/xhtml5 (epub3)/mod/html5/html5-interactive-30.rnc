

   html5.flow.class |= html5.interactive.flow.class
   html5.phrasing.class |= html5.interactive.phrasing.class
   html5.metadata.class |= html5.interactive.metadata.class

   html5.interactive.phrasing.class |= html5.command.class | html5.progress
   html5.interactive.flow.class |= html5.menu | html5.details
   html5.interactive.metadata.class |= html5.command.class

   html5.command.class |= html5.command.command | html5.command.radio | html5.command.checkbox
      
    
   html5.html.attlist &= html5.interactive.manifest.attr?
   html5.global.attrs &= html5.interactive.global.attrs
   
   html5.interactive.global.attrs &= html5.interactive.contextmenu.attr?
      & html5.interactive.contenteditable.attr? & html5.interactive.draggable.attr?
	  & html5.interactive.hidden.attr? & html5.interactive.spellcheck.attr? 
	  & html5.interactive.accesskey.attr? & html5.interactive.tabindex.attr? & html5.interactive.dropzone.attr?
      
   html5.progress =
## The progress element represents the completion progress of a task. The progress is either indeterminate, indicating that progress is being made but that it is not clear how much more work remains to be done before the task is complete (e.g. because the task is waiting for a remote host to respond), or the progress is a number in the range zero to a maximum, giving the fraction of work that has so far been completed.
 element progress { html5.progress.attlist & html5.progress.content }
   html5.progress.attlist &= html5.phrasing.attrs & html5.progress.value.attr? & html5.progress.max.attr?
   html5.progress.value.attr = attribute value { datatype.float.non-negative }
   html5.progress.max.attr = attribute max { datatype.float.positive }
   html5.progress.content = html5.phrasing.model
		

   html5.command.command =
## The command element represents a command that the user can invoke.
 element command { html5.command.command.attlist }
   html5.command.command.attlist &= html5.phrasing.attrs & html5.command.command.type.attr? & html5.common-command.attrs
   html5.command.command.type.attr = attribute type { 'command' }
   
   html5.command.checked.attr = attribute checked { 'checked' | '' }
   
   html5.command.radio =
## The command element represents a command that the user can invoke.
 element command { html5.command.radio.attlist }
   html5.command.radio.attlist &= html5.phrasing.attrs & ( html5.command.radio.type.attr & html5.command.radio.radiogroup.attr  & html5.command.checked.attr? ) & html5.common-command.attrs
   html5.command.radio.type.attr = attribute type { 'radio' }
   html5.command.radio.radiogroup.attr = attribute radiogroup { datatype.string } 
      
   html5.command.checkbox =
## The command element represents a command that the user can invoke.
 element command { html5.command.checkbox.attlist }
   html5.command.checkbox.attlist = html5.phrasing.attrs & ( html5.command.checkbox.type.attr & html5.command.checked.attr? ) & html5.common-command.attrs	
   html5.command.checkbox.type.attr = attribute type { 'checkbox' }			
   	
   html5.common-command.attrs &= html5.command.label.attr? & html5.command.icon.attr? & html5.command.disabled.attr?
   html5.command.label.attr = attribute label { string }
   html5.command.icon.attr = attribute icon { datatype.html5.URL.spaces }
   html5.command.disabled.attr = attribute disabled { 'disabled' |'' }
			
			
   html5.menu =
## The menu element represents a list of commands.
 element menu { html5.menu.attlist & html5.menu.content }
   html5.menu.attlist &= html5.global.attrs & html5.menu.type.attr? & html5.menu.label.attr?
   html5.menu.type.attr = attribute type { 'toolbar' | 'context' }
   html5.menu.label.attr = attribute label { string }
   html5.menu.content = ( html5.mli* | html5.flow.model )
	
   html5.mli =
## The li element represents a list item. If its parent element is an ol, ul, or menu element, then the element is an item of the parent element's list, as defined for those elements. Otherwise, the list item has no defined list-related relationship to any other li element.
 element li { html5.mli.attlist & html5.mli.content }
   html5.mli.attlist &= html5.global.attrs
   html5.mli.content = html5.flow.model
		
   html5.details =
## The details element represents a disclosure widget from which the user can obtain additional information or controls.
 element details { html5.details.attlist & html5.details.content }
   html5.details.attlist &= html5.global.attrs & html5.details.open.attr?
   html5.details.open.attr = attribute open { 'open' | '' }
   html5.details.content = html5.summary?, html5.flow.model 
		
   html5.summary =
## The summary element represents a summary, caption, or legend for the rest of the contents of the summary element's parent details element, if any.
 element summary { html5.summary.attlist & html5.summary.content }
   html5.summary.attlist &= html5.global.attrs
   html5.summary.content = html5.phrasing.model		


   html5.interactive.manifest.attr = attribute manifest { datatype.html5.URL.spaces }		

   html5.interactive.contextmenu.attr = attribute contextmenu { datatype.IDREF }
   html5.interactive.contenteditable.attr = attribute contenteditable { 'true' | 'false' | '' }		
   html5.interactive.draggable.attr = attribute draggable { 'true' | 'false' }		
   html5.interactive.hidden.attr = attribute hidden { 'hidden' | '' }
   html5.interactive.spellcheck.attr = attribute spellcheck { 'true' | 'false' | '' }		
   html5.interactive.accesskey.attr = attribute accesskey { datatype.html5.accesskey }
   html5.interactive.tabindex.attr = attribute tabindex { datatype.integer }
   html5.interactive.dropzone.attr = attribute dropzone { list {
      ( xsd:string { pattern = "[sS]:.+" } | xsd:string { pattern = "[fF]:.+" })*,
      ( 'copy' | 'move' | 'link' )?,
      ( xsd:string { pattern = "[sS]:.+" } | xsd:string { pattern = "[fF]:.+" })*
      }
   }
	
	
